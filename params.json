{
  "name": "Interpréteur Scheme",
  "tagline": "",
  "body": "# Présentation\r\n\r\nLe but du projet informatique est de créer un interpréteur de la langage de programmation _Scheme_, en _C_. \r\n\r\n# Livrables\r\n\r\nPour faciliter sa exécution, le projet informatique a été divisé en quatre livrables intermédiaires.\r\n\r\n\r\n## Livrable 2 : Évaluation et environnement\r\n\r\nLe but du deuxième livrable, c'est de définir des variables dans l'environnement et aussi d'implémenter et utiliser les formes, à savoir, `quote`, `define`, `set!`, `if`, `and` et `or`.  Pendant l'exécution du deuxième livrable, il faut que les étudiants continuent à construire sur le code qu'ils ont fait pour le premier livrable, en ajoutant les nouvelles fonctionnalités. Les étudiants doivent aussi écrire un nouveau jeu de tests pour qu'ils puissent savoir si leur code est correcte.\r\n\r\nPour implémenter ces formes spéciales, on a utilisé des _singletons_, qui est un patron de conception dont l'objectif est de faire l'instanciation de seulement un objet, sans le copier. Par exemple, dans l'interpréteur, on peut économiser de la mémoire en ayant seulement une instante pour les objets `true`, `false`, `nil` et aussi pour les formes qu'on a implémenté, par exemple `quote`, `if`, etc.\r\n\r\nCe livrable peut être trouvé [ici](https://github.com/suehtamacv/interpreteur-scheme/releases/tag/v2-deuxiemeLivrable).\r\n\r\n## Livrable 1 : Interpréteur et environnement\r\n\r\nDeux des fonctionnalités peut-être les plus délicates à implanter sont sans doute l'analyse lexicale d'une commande pour construire « l'arbre syntaxique » correspondant (« _parsing_ ») et l'affichage de l'arbre qui encode le résultat de cette commande. Il est donc intéressant de commencer par réaliser une fonction de lecture (qui construit « l'arbre syntaxique» correspondant à la commande) et une fonction d'écriture (qui affiche un arbre donné à l'écran). C'était le but du premier incrément.\r\n\r\nDonc, pendant l'exécution du premier livrable, faut que les étudiants prennent un code base et écrivent les fonctions pour lire les atomes et les paires, concepts inhérent de la grammaire de _Scheme_. Ces objets ne seront pas encore interprétés, mais seulement sauvegardés et ensuite imprimés.\r\n\r\nCe livrable peut être trouvé [ici](https://github.com/suehtamacv/interpreteur-scheme/releases/tag/v1-premierLivrable).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}